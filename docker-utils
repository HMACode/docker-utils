#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
docker_utils_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker-utils - Utilily commands for managing docker related tasks\n"
    echo

  else
    printf "docker-utils - Utilily commands for managing docker related tasks\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  docker-utils COMMAND\n"
  printf "  docker-utils [COMMAND] --help | -h\n"
  printf "  docker-utils --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Backup a docker volume\n" "backup "
  printf "  %s   Restore a volume using a backup file\n" "restore"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
docker_utils_backup_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker-utils backup - Backup a docker volume\n"
    echo

  else
    printf "docker-utils backup - Backup a docker volume\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  docker-utils backup VOLUME [OPTIONS]\n"
  printf "  docker-utils backup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--out, -o OUTPUT"
    printf "    Name of the generated backup file (defaults to the name of the volume and\n    the current date)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "VOLUME"
    printf "    Name of the volume to backup\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  docker-utils backup postgres-data\n"
    printf "  docker-utils backup postgres-data --out bkup.tar\n"
    echo

  fi
}

# :command.usage
docker_utils_restore_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker-utils restore - Restore a volume using a backup file\n"
    echo

  else
    printf "docker-utils restore - Restore a volume using a backup file\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  docker-utils restore BACKUP-FILE VOLUME [OPTIONS]\n"
  printf "  docker-utils restore --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    delete existing volume (if any)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "BACKUP-FILE"
    printf "    Backup file to restore volume from\n"
    echo

    # :argument.usage
    printf "  %s\n" "VOLUME"
    printf "    the name of the volume to create\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  docker-utils restore bkup-file.tar new-volume-name\n"
    printf "  docker-utils restore bkup-file.tar new-volume-name --force\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
docker_utils_backup_command() {
  # src/backup_command.sh
  volume_name=${args[volume]}
  output_filename=${args[--out]}

  # Check input not empty
  if [  -z "$volume_name" ]; then
      echo "Name of the volume cannot be empty"
      exit 1
  fi

  # Check volume exists
  if ! docker volume inspect "$volume_name" &> /dev/null; then
      echo "Volume '$volume_name' does not exist!"
      exit 1
  fi

  # Default filename
  if [ -z "$output_filename" ]; then
      output_filename="bkup-volume-$volume_name-$(date +"%d-%m-%Y_%H_%M").tar"
  fi

  if ! [[ "$output_filename" =~ ^[a-zA-Z0-9_.-]+.tar$ ]]; then
      echo "Invalid output filename '$output_filename'."
      exit 1
  fi

  echo "[*] Backing up volume $volume_name to file: $output_filename ..."
  docker run --rm -v $volume_name:/volume-data -v $PWD:/bkup alpine tar cf /bkup/$output_filename /volume-data &>/dev/null

  if [ $? -eq 0 ]; then
      echo "[+] Backup completed successfuly"
  else
      echo "[-] Backup failed"
  fi

}

# :command.function
docker_utils_restore_command() {
  # src/restore_command.sh
  backup_file=${args[backup-file]}
  volume_name=${args[volume]}
  force=${args[--force]}

  # Check backup file exists
  if [ ! -f $backup_file ]; then
  	echo "Backup file '$backup_file' does not exist"
  	exit 1
  fi

  # Check volume name is valid (todo: search exact patter for allowed volume names)
  if ! [[ "$volume_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
      echo "Invalid volume name '$volume_name'"
      exit 1
  fi

  # Check if volume already exist with the same requested  name
  if  docker volume inspect "$volume_name" &> /dev/null; then
  	if [ ! -z $force ]; then
  		echo "Deleting existing volume $volume_name"
  		docker volume rm $volume_name
  	else
  		echo "volume '$volume_name' already exists, carefully re-run the command with --force if you want to override"
  		exit 1
  	fi
  fi

  # Copy backup file to a temporary location
  temp_install_dir="/tmp/restore_tmp_$(date +%s)"

  mkdir -p $temp_install_dir
  cp $backup_file $temp_install_dir

  # Create volume and copy backup content
  docker run --rm -v $volume_name:/restore -v $temp_install_dir:/backup alpine sh -c "cd /restore && tar xvf /backup/$backup_file --strip 1 && echo -e '\e[32m[+] Backup restored !\e[0m'"

  # Clean up
  rm -rf $temp_install_dir

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        docker_utils_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    backup | b)
      action="backup"
      shift
      docker_utils_backup_parse_requirements "$@"
      shift $#
      ;;

    restore | r)
      action="restore"
      shift
      docker_utils_restore_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      docker_utils_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
docker_utils_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        docker_utils_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --out | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--out']="$2"
          shift
          shift
        else
          printf "%s\n" "--out requires an argument: --out, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['volume']+x} ]]; then

          args['volume']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['volume']+x} ]]; then
    printf "missing required argument: VOLUME\nusage: docker-utils backup VOLUME [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
docker_utils_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        docker_utils_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="restore"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['backup-file']+x} ]]; then

          args['backup-file']=$1
          shift
        elif [[ -z ${args['volume']+x} ]]; then

          args['volume']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['backup-file']+x} ]]; then
    printf "missing required argument: BACKUP-FILE\nusage: docker-utils restore BACKUP-FILE VOLUME [OPTIONS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['volume']+x} ]]; then
    printf "missing required argument: VOLUME\nusage: docker-utils restore BACKUP-FILE VOLUME [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "backup") docker_utils_backup_command ;;
    "restore") docker_utils_restore_command ;;
  esac
}

initialize
run "$@"
